-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Interface.PlaceInterface exposing (..)

import EnturApi.InputObject
import EnturApi.Interface
import EnturApi.Object
import EnturApi.Scalar
import EnturApi.ScalarCodecs
import EnturApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onStopPlace : SelectionSet decodesTo EnturApi.Object.StopPlace
    , onQuay : SelectionSet decodesTo EnturApi.Object.Quay
    , onBikeRentalStation : SelectionSet decodesTo EnturApi.Object.BikeRentalStation
    , onBikePark : SelectionSet decodesTo EnturApi.Object.BikePark
    , onCarPark : SelectionSet decodesTo EnturApi.Object.CarPark
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo EnturApi.Interface.PlaceInterface
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "StopPlace" selections.onStopPlace
        , Object.buildFragment "Quay" selections.onQuay
        , Object.buildFragment "BikeRentalStation" selections.onBikeRentalStation
        , Object.buildFragment "BikePark" selections.onBikePark
        , Object.buildFragment "CarPark" selections.onCarPark
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onStopPlace = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onQuay = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onBikeRentalStation = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onBikePark = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCarPark = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


id : SelectionSet EnturApi.ScalarCodecs.Id EnturApi.Interface.PlaceInterface
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (EnturApi.ScalarCodecs.codecs |> EnturApi.Scalar.unwrapCodecs |> .codecId |> .decoder)


latitude : SelectionSet (Maybe Float) EnturApi.Interface.PlaceInterface
latitude =
    Object.selectionForField "(Maybe Float)" "latitude" [] (Decode.float |> Decode.nullable)


longitude : SelectionSet (Maybe Float) EnturApi.Interface.PlaceInterface
longitude =
    Object.selectionForField "(Maybe Float)" "longitude" [] (Decode.float |> Decode.nullable)
