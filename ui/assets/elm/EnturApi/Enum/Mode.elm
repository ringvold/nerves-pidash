-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.Mode exposing (Mode(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Transit - Any for of public transportation
  - Car\_park - Combine with foot and transit for park and ride.
  - Car\_dropoff - Combine with foot and transit for kiss and ride.
  - Car\_pickup - Combine with foot and transit for ride and kiss.

-}
type Mode
    = Air
    | Bicycle
    | Bus
    | Cableway
    | Water
    | Funicular
    | Lift
    | Rail
    | Metro
    | Tram
    | Coach
    | Transit
    | Foot
    | Car
    | Car_park
    | Car_dropoff
    | Car_pickup


list : List Mode
list =
    [ Air, Bicycle, Bus, Cableway, Water, Funicular, Lift, Rail, Metro, Tram, Coach, Transit, Foot, Car, Car_park, Car_dropoff, Car_pickup ]


decoder : Decoder Mode
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "air" ->
                        Decode.succeed Air

                    "bicycle" ->
                        Decode.succeed Bicycle

                    "bus" ->
                        Decode.succeed Bus

                    "cableway" ->
                        Decode.succeed Cableway

                    "water" ->
                        Decode.succeed Water

                    "funicular" ->
                        Decode.succeed Funicular

                    "lift" ->
                        Decode.succeed Lift

                    "rail" ->
                        Decode.succeed Rail

                    "metro" ->
                        Decode.succeed Metro

                    "tram" ->
                        Decode.succeed Tram

                    "coach" ->
                        Decode.succeed Coach

                    "transit" ->
                        Decode.succeed Transit

                    "foot" ->
                        Decode.succeed Foot

                    "car" ->
                        Decode.succeed Car

                    "car_park" ->
                        Decode.succeed Car_park

                    "car_dropoff" ->
                        Decode.succeed Car_dropoff

                    "car_pickup" ->
                        Decode.succeed Car_pickup

                    _ ->
                        Decode.fail ("Invalid Mode type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Mode -> String
toString enum =
    case enum of
        Air ->
            "air"

        Bicycle ->
            "bicycle"

        Bus ->
            "bus"

        Cableway ->
            "cableway"

        Water ->
            "water"

        Funicular ->
            "funicular"

        Lift ->
            "lift"

        Rail ->
            "rail"

        Metro ->
            "metro"

        Tram ->
            "tram"

        Coach ->
            "coach"

        Transit ->
            "transit"

        Foot ->
            "foot"

        Car ->
            "car"

        Car_park ->
            "car_park"

        Car_dropoff ->
            "car_dropoff"

        Car_pickup ->
            "car_pickup"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Mode
fromString enumString =
    case enumString of
        "air" ->
            Just Air

        "bicycle" ->
            Just Bicycle

        "bus" ->
            Just Bus

        "cableway" ->
            Just Cableway

        "water" ->
            Just Water

        "funicular" ->
            Just Funicular

        "lift" ->
            Just Lift

        "rail" ->
            Just Rail

        "metro" ->
            Just Metro

        "tram" ->
            Just Tram

        "coach" ->
            Just Coach

        "transit" ->
            Just Transit

        "foot" ->
            Just Foot

        "car" ->
            Just Car

        "car_park" ->
            Just Car_park

        "car_dropoff" ->
            Just Car_dropoff

        "car_pickup" ->
            Just Car_pickup

        _ ->
            Nothing
