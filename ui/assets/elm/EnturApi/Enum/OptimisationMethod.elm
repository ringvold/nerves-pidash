-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.OptimisationMethod exposing (..)

import Json.Decode as Decode exposing (Decoder)


type OptimisationMethod
    = Quick
    | Safe
    | Flat
    | Greenways
    | Triangle
    | Transfers


list : List OptimisationMethod
list =
    [ Quick, Safe, Flat, Greenways, Triangle, Transfers ]


decoder : Decoder OptimisationMethod
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "quick" ->
                        Decode.succeed Quick

                    "safe" ->
                        Decode.succeed Safe

                    "flat" ->
                        Decode.succeed Flat

                    "greenways" ->
                        Decode.succeed Greenways

                    "triangle" ->
                        Decode.succeed Triangle

                    "transfers" ->
                        Decode.succeed Transfers

                    _ ->
                        Decode.fail ("Invalid OptimisationMethod type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : OptimisationMethod -> String
toString enum =
    case enum of
        Quick ->
            "quick"

        Safe ->
            "safe"

        Flat ->
            "flat"

        Greenways ->
            "greenways"

        Triangle ->
            "triangle"

        Transfers ->
            "transfers"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OptimisationMethod
fromString enumString =
    case enumString of
        "quick" ->
            Just Quick

        "safe" ->
            Just Safe

        "flat" ->
            Just Flat

        "greenways" ->
            Just Greenways

        "triangle" ->
            Just Triangle

        "transfers" ->
            Just Transfers

        _ ->
            Nothing
