-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.RealtimeState exposing (RealtimeState(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Scheduled - The service journey information comes from the regular time table, i.e. no real-time update has been applied.
  - Updated - The service journey information has been updated, but the journey pattern stayed the same as the journey pattern of the scheduled service journey.
  - Canceled - The service journey has been canceled by a real-time update.
  - Added - The service journey has been added using a real-time update, i.e. the service journey was not present in the regular time table.
  - Modified - The service journey information has been updated and resulted in a different journey pattern compared to the journey pattern of the scheduled service journey.

-}
type RealtimeState
    = Scheduled
    | Updated
    | Canceled
    | Added
    | Modified


list : List RealtimeState
list =
    [ Scheduled, Updated, Canceled, Added, Modified ]


decoder : Decoder RealtimeState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "scheduled" ->
                        Decode.succeed Scheduled

                    "updated" ->
                        Decode.succeed Updated

                    "canceled" ->
                        Decode.succeed Canceled

                    "Added" ->
                        Decode.succeed Added

                    "modified" ->
                        Decode.succeed Modified

                    _ ->
                        Decode.fail ("Invalid RealtimeState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : RealtimeState -> String
toString enum =
    case enum of
        Scheduled ->
            "scheduled"

        Updated ->
            "updated"

        Canceled ->
            "canceled"

        Added ->
            "Added"

        Modified ->
            "modified"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RealtimeState
fromString enumString =
    case enumString of
        "scheduled" ->
            Just Scheduled

        "updated" ->
            Just Updated

        "canceled" ->
            Just Canceled

        "Added" ->
            Just Added

        "modified" ->
            Just Modified

        _ ->
            Nothing
