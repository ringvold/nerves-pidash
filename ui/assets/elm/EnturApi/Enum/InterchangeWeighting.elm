-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.InterchangeWeighting exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - PreferredInterchange - Highest priority interchange.
  - RecommendedInterchange - Second highest priority interchange.
  - InterchangeAllowed - Third highest priority interchange.
  - NoInterchange - Interchange not allowed.

-}
type InterchangeWeighting
    = PreferredInterchange
    | RecommendedInterchange
    | InterchangeAllowed
    | NoInterchange


list : List InterchangeWeighting
list =
    [ PreferredInterchange, RecommendedInterchange, InterchangeAllowed, NoInterchange ]


decoder : Decoder InterchangeWeighting
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "preferredInterchange" ->
                        Decode.succeed PreferredInterchange

                    "recommendedInterchange" ->
                        Decode.succeed RecommendedInterchange

                    "interchangeAllowed" ->
                        Decode.succeed InterchangeAllowed

                    "noInterchange" ->
                        Decode.succeed NoInterchange

                    _ ->
                        Decode.fail ("Invalid InterchangeWeighting type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : InterchangeWeighting -> String
toString enum =
    case enum of
        PreferredInterchange ->
            "preferredInterchange"

        RecommendedInterchange ->
            "recommendedInterchange"

        InterchangeAllowed ->
            "interchangeAllowed"

        NoInterchange ->
            "noInterchange"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe InterchangeWeighting
fromString enumString =
    case enumString of
        "preferredInterchange" ->
            Just PreferredInterchange

        "recommendedInterchange" ->
            Just RecommendedInterchange

        "interchangeAllowed" ->
            Just InterchangeAllowed

        "noInterchange" ->
            Just NoInterchange

        _ ->
            Nothing
