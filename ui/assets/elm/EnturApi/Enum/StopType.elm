-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.StopType exposing (StopType(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type StopType
    = Regular
    | Flexible_area


list : List StopType
list =
    [ Regular, Flexible_area ]


decoder : Decoder StopType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "regular" ->
                        Decode.succeed Regular

                    "flexible_area" ->
                        Decode.succeed Flexible_area

                    _ ->
                        Decode.fail ("Invalid StopType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : StopType -> String
toString enum =
    case enum of
        Regular ->
            "regular"

        Flexible_area ->
            "flexible_area"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe StopType
fromString enumString =
    case enumString of
        "regular" ->
            Just Regular

        "flexible_area" ->
            Just Flexible_area

        _ ->
            Nothing
