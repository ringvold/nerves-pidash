-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.VertexType exposing (VertexType(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type VertexType
    = Normal
    | Transit
    | BikePark
    | BikeShare
    | ParkAndRide


list : List VertexType
list =
    [ Normal, Transit, BikePark, BikeShare, ParkAndRide ]


decoder : Decoder VertexType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "normal" ->
                        Decode.succeed Normal

                    "transit" ->
                        Decode.succeed Transit

                    "bikePark" ->
                        Decode.succeed BikePark

                    "bikeShare" ->
                        Decode.succeed BikeShare

                    "parkAndRide" ->
                        Decode.succeed ParkAndRide

                    _ ->
                        Decode.fail ("Invalid VertexType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : VertexType -> String
toString enum =
    case enum of
        Normal ->
            "normal"

        Transit ->
            "transit"

        BikePark ->
            "bikePark"

        BikeShare ->
            "bikeShare"

        ParkAndRide ->
            "parkAndRide"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe VertexType
fromString enumString =
    case enumString of
        "normal" ->
            Just Normal

        "transit" ->
            Just Transit

        "bikePark" ->
            Just BikePark

        "bikeShare" ->
            Just BikeShare

        "parkAndRide" ->
            Just ParkAndRide

        _ ->
            Nothing
