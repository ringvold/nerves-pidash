-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.StopCondition exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Destination - Situation applies when stop is the destination of the leg.
  - StartPoint - Situation applies when stop is the startpoint of the leg.
  - ExceptionalStop - Situation applies when transfering to another leg at the stop.
  - NotStopping - Situation applies when passing the stop, without stopping.
  - RequestStop - Situation applies when at the stop, and the stop requires a request to stop.

-}
type StopCondition
    = Destination
    | StartPoint
    | ExceptionalStop
    | NotStopping
    | RequestStop


list : List StopCondition
list =
    [ Destination, StartPoint, ExceptionalStop, NotStopping, RequestStop ]


decoder : Decoder StopCondition
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "destination" ->
                        Decode.succeed Destination

                    "startPoint" ->
                        Decode.succeed StartPoint

                    "exceptionalStop" ->
                        Decode.succeed ExceptionalStop

                    "notStopping" ->
                        Decode.succeed NotStopping

                    "requestStop" ->
                        Decode.succeed RequestStop

                    _ ->
                        Decode.fail ("Invalid StopCondition type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : StopCondition -> String
toString enum =
    case enum of
        Destination ->
            "destination"

        StartPoint ->
            "startPoint"

        ExceptionalStop ->
            "exceptionalStop"

        NotStopping ->
            "notStopping"

        RequestStop ->
            "requestStop"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe StopCondition
fromString enumString =
    case enumString of
        "destination" ->
            Just Destination

        "startPoint" ->
            Just StartPoint

        "exceptionalStop" ->
            Just ExceptionalStop

        "notStopping" ->
            Just NotStopping

        "requestStop" ->
            Just RequestStop

        _ ->
            Nothing
