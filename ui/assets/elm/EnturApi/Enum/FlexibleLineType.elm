-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.FlexibleLineType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type FlexibleLineType
    = CorridorService
    | MainRouteWithFlexibleEnds
    | FlexibleAreasOnly
    | HailAndRideSections
    | FixedStopAreaWide
    | FreeAreaAreaWide
    | MixedFlexible
    | MixedFlexibleAndFixed
    | Fixed
    | Other


list : List FlexibleLineType
list =
    [ CorridorService, MainRouteWithFlexibleEnds, FlexibleAreasOnly, HailAndRideSections, FixedStopAreaWide, FreeAreaAreaWide, MixedFlexible, MixedFlexibleAndFixed, Fixed, Other ]


decoder : Decoder FlexibleLineType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "corridorService" ->
                        Decode.succeed CorridorService

                    "mainRouteWithFlexibleEnds" ->
                        Decode.succeed MainRouteWithFlexibleEnds

                    "flexibleAreasOnly" ->
                        Decode.succeed FlexibleAreasOnly

                    "hailAndRideSections" ->
                        Decode.succeed HailAndRideSections

                    "fixedStopAreaWide" ->
                        Decode.succeed FixedStopAreaWide

                    "freeAreaAreaWide" ->
                        Decode.succeed FreeAreaAreaWide

                    "mixedFlexible" ->
                        Decode.succeed MixedFlexible

                    "mixedFlexibleAndFixed" ->
                        Decode.succeed MixedFlexibleAndFixed

                    "fixed" ->
                        Decode.succeed Fixed

                    "other" ->
                        Decode.succeed Other

                    _ ->
                        Decode.fail ("Invalid FlexibleLineType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : FlexibleLineType -> String
toString enum =
    case enum of
        CorridorService ->
            "corridorService"

        MainRouteWithFlexibleEnds ->
            "mainRouteWithFlexibleEnds"

        FlexibleAreasOnly ->
            "flexibleAreasOnly"

        HailAndRideSections ->
            "hailAndRideSections"

        FixedStopAreaWide ->
            "fixedStopAreaWide"

        FreeAreaAreaWide ->
            "freeAreaAreaWide"

        MixedFlexible ->
            "mixedFlexible"

        MixedFlexibleAndFixed ->
            "mixedFlexibleAndFixed"

        Fixed ->
            "fixed"

        Other ->
            "other"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe FlexibleLineType
fromString enumString =
    case enumString of
        "corridorService" ->
            Just CorridorService

        "mainRouteWithFlexibleEnds" ->
            Just MainRouteWithFlexibleEnds

        "flexibleAreasOnly" ->
            Just FlexibleAreasOnly

        "hailAndRideSections" ->
            Just HailAndRideSections

        "fixedStopAreaWide" ->
            Just FixedStopAreaWide

        "freeAreaAreaWide" ->
            Just FreeAreaAreaWide

        "mixedFlexible" ->
            Just MixedFlexible

        "mixedFlexibleAndFixed" ->
            Just MixedFlexibleAndFixed

        "fixed" ->
            Just Fixed

        "other" ->
            Just Other

        _ ->
            Nothing
