-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.PurchaseWhen exposing (PurchaseWhen(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type PurchaseWhen
    = TimeOfTravelOnly
    | DayOfTravelOnly
    | UntilPreviousDay
    | AdvanceOnly
    | AdvanceAndDayOfTravel
    | Other


list : List PurchaseWhen
list =
    [ TimeOfTravelOnly, DayOfTravelOnly, UntilPreviousDay, AdvanceOnly, AdvanceAndDayOfTravel, Other ]


decoder : Decoder PurchaseWhen
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "timeOfTravelOnly" ->
                        Decode.succeed TimeOfTravelOnly

                    "dayOfTravelOnly" ->
                        Decode.succeed DayOfTravelOnly

                    "untilPreviousDay" ->
                        Decode.succeed UntilPreviousDay

                    "advanceOnly" ->
                        Decode.succeed AdvanceOnly

                    "advanceAndDayOfTravel" ->
                        Decode.succeed AdvanceAndDayOfTravel

                    "other" ->
                        Decode.succeed Other

                    _ ->
                        Decode.fail ("Invalid PurchaseWhen type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : PurchaseWhen -> String
toString enum =
    case enum of
        TimeOfTravelOnly ->
            "timeOfTravelOnly"

        DayOfTravelOnly ->
            "dayOfTravelOnly"

        UntilPreviousDay ->
            "untilPreviousDay"

        AdvanceOnly ->
            "advanceOnly"

        AdvanceAndDayOfTravel ->
            "advanceAndDayOfTravel"

        Other ->
            "other"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PurchaseWhen
fromString enumString =
    case enumString of
        "timeOfTravelOnly" ->
            Just TimeOfTravelOnly

        "dayOfTravelOnly" ->
            Just DayOfTravelOnly

        "untilPreviousDay" ->
            Just UntilPreviousDay

        "advanceOnly" ->
            Just AdvanceOnly

        "advanceAndDayOfTravel" ->
            Just AdvanceAndDayOfTravel

        "other" ->
            Just Other

        _ ->
            Nothing
